# Auto-generated using compose2nix v0.2.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };
  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."changedetection" = {
    image = "dgtlmoon/changedetection.io:0.45.12";
    environment = {
      "BASE_URL" = "https://change.romanpeters.nl";
      "PLAYWRIGHT_DRIVER_URL" = "ws://playwright-chrome:3000/?stealth=1&--disable-web-security=true";
    };
    volumes = [
      "/Users/romanpeters/Developer/infrastructure_docker/changedetection/data:/datastore:rw"
    ];
    ports = [
      "8001:5000/tcp"
    ];
    dependsOn = [
      "changedetection.io-browser"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=changedetection"
      "--network=change_default"
    ];
  };
  systemd.services."podman-changedetection" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
    };
    after = [
      "podman-network-change_default.service"
    ];
    requires = [
      "podman-network-change_default.service"
    ];
    partOf = [
      "podman-compose-change-root.target"
    ];
    wantedBy = [
      "podman-compose-change-root.target"
    ];
  };
  virtualisation.oci-containers.containers."changedetection.io-browser" = {
    image = "browserless/chrome";
    environment = {
      "CHROME_REFRESH_TIME" = "600000";
      "CONNECTION_TIMEOUT" = "300000";
      "DEFAULT_BLOCK_ADS" = "true";
      "DEFAULT_STEALTH" = "true";
      "ENABLE_DEBUGGER" = "false";
      "MAX_CONCURRENT_SESSIONS" = "10";
      "PREBOOT_CHROME" = "true";
      "SCREEN_DEPTH" = "16";
      "SCREEN_HEIGHT" = "1024";
      "SCREEN_WIDTH" = "1920";
    };
    log-driver = "journald";
    extraOptions = [
      "--hostname=playwright-chrome"
      "--network-alias=playwright-chrome"
      "--network=change_default"
    ];
  };
  systemd.services."podman-changedetection.io-browser" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
    };
    after = [
      "podman-network-change_default.service"
    ];
    requires = [
      "podman-network-change_default.service"
    ];
    partOf = [
      "podman-compose-change-root.target"
    ];
    wantedBy = [
      "podman-compose-change-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-change_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f change_default";
    };
    script = ''
      podman network inspect change_default || podman network create change_default
    '';
    partOf = [ "podman-compose-change-root.target" ];
    wantedBy = [ "podman-compose-change-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-change-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
